{
  "name": "string-extended",
  "version": "0.0.8",
  "description": "Additional string extensions with a chainable api",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/string-extended.git"
  },
  "keywords": [
    "String",
    "extender",
    "utilities"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": [
      "ie/8..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "date-extended": "~0.0.3",
    "array-extended": "~0.0.5"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-it": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/string-extended.png?branch=master)](https://travis-ci.org/doug-martin/string-extended)\n\n[![browser support](https://ci.testling.com/doug-martin/string-extended.png)](http://ci.testling.com/doug-martin/string-extended)\n\n# string-extended\n\n`string-extended` is a Javascript library that can be used standalone or incorporated into [`extended`](https://github.com/doug-martin/extended)\n\n```javascript\nvar string = require(\"string-extended\");\n```\n\nOr\n\n```javascript\nvar myextended = require(\"extended\")\n\t.register(require(\"string-extended\"));\n```\n\n## Installation\n\n```\nnpm install string-extended\n```\n\nOr [download the source](https://raw.github.com/doug-martin/string-extended/master/index.js) ([minified](https://raw.github.com/doug-martin/string-extended/master/string-extended.min.js))\n\n## Usage\n\n**`toArray`**\n\n Converts a string to an array\n\n```javascript\n\nstring.toArray(\"a|b|c|d\", \"|\") => [\"a\",\"b\",\"c\",\"d\"]\nstring.toArray(\"a\", \"|\") => [\"a\"]\nstring.toArray(\"\", \"|\") => []\n```\n\n**`pad`**\n\nPads a string\n\n```javascript\n\n//pad at the end\nstring.pad(\"STR\", 5, \" \", true) => \"STR  \"\n\n//pad at the beginning\nstring.pad(\"STR\", 5, \"$\") => \"$$STR\"\n```\n\n**`truncate`**\n\nTruncates a string to the specified length.\n\n```javascript\n//from the beginning\nstring.truncate(\"abcdefg\", 3) => \"abc\";\n//from the end\nstring.truncate(\"abcdefg\", 3,true) => \"efg\"\n//omit the length\nstring.truncate(\"abcdefg\") => \"abcdefg\"\n```\n\n**`multiply`**\n\nReturns a string duplicated n times\n\n```javascript\nstring.multiply(\"HELLO\", 5) => \"HELLOHELLOHELLOHELLOHELLO\"\n```\n\n\n**`escape`**\n\nEscapes a string so that it can safely be used in a RegExp.\n\n```javascript\nstringExtended.escape(\".$?*|{}()[]\\/+^\"); \"//\\.\\$\\?\\*\\|\\{\\}\\(\\)\\[\\]\\/\\+\\^\"\n\nstringExtended(\".$?*|{}()[]\\/+^\").escape().value(); \"//\\.\\$\\?\\*\\|\\{\\}\\(\\)\\[\\]\\/\\+\\^\"\n```\n\nYou can also specify an optional array of characters to ignore when escaping.\n\n```javascript\nstringExtended.escape(\".$?*|{}()[]\\/+^\", [\".\", \"?\", \"{\", \"[\"]); //\".\\$?\\*\\|{\\}\\(\\)[\\]\\/\\+\\^\"\nstringExtended(\".$?*|{}()[]\\/+^\").escape([\".\", \"?\", \"{\", \"[\"]).value(); //\".\\$?\\*\\|{\\}\\(\\)[\\]\\/\\+\\^\"\n```\n\n**`trim`**\nTrims white space characters from the beginning and end of a string.\n\n```javascript\nstringExtended.trim(\"   Hello World   \"); //\"Hello World\"\n\nstringExtended(\"   Hello World   \").trim().value(); //\"Hello World\"\n```\n\n**`trimLeft`**\n\nTrims white space characters from the beginning of a string.\n\n```javascript\nstringExtended.trimLeft(\"   Hello World   \"); //\"Hello World   \"\n\nstringExtended(\"   Hello World   \").trimLeft().value(); //\"Hello World   \"\n```\n\n**`trimRight`**\n\nTrims white space characters from the end of a string.\n\n```javascript\nstringExtended.trimLeft(\"   Hello World   \"); //\"   Hello World\"\n\nstringExtended(\"   Hello World   \").trimLeft().value(); //\"   Hello World\"\n```\n\n**`format`**\n\nFormats a string with the specified format.\n\n \n1. String Formats %[options]s\n   * - : left justified\n   * Char : padding character **Excludes d,j,s**\n   * Number : width\n         \n2. Number Formats %[options]d\n   * - : left justified\n   * + : signed number\n   * Char : padding character **Excludes d,j,s**\n   * Number : width         \n3. Object Formats %[options]j\n   * Number : spacing for object properties.     \n\n```javascript\nvar format = string.format;\n\nformat(\"%s, %s\", [\"Hello\", \"World\"]) => \"Hello, World\";\n\nformat(\"%[ 10]s, %[- 10]s\", [\"Hello\", \"World\"]); //\"     Hello, World     \";\n\nformat(\"%-!10s, %#10s, %10s and %-10s\", \"apple\", \"orange\", \"bananas\", \"watermelons\")\n     //\"apple!!!!!, ####orange,    bananas and watermelon\"\n\nformat(\"%+d, %+d, %10d, %-10d, %-+#10d, %10d\", 1,-2, 1, 2, 3, 100000000000)\n     //\"+1, -2, 0000000001, 2000000000, +3########, 1000000000\"\n\nformat(\"%[h:mm a]D\", [date]) => 7:32 PM - local -\n\nformat(\"%[h:mm a]Z\", [date]) => 12:32 PM - UTC\n\n //When using object formats they must be in an array otherwise\n //format will try to interpolate the properties into the string.\nformat(\"%j\", [{a : \"b\"}]); //'{\"a\":\"b\"}'\n\nformat(\"%1j, %4j\", [{a : \"b\"}, {a : \"b\"}]); //'{\\n \"a\": \"b\"\\n},\\n{\\n    \"a\": \"b\"\\n}'\n\nformat(\"{hello}, {world}\", {hello : \"Hello\", world : \"World\"); //\"Hello, World\";\n\nformat({[-s10]apple}, {[%#10]orange}, {[10]banana} and {[-10]watermelons}\",{\n    apple : \"apple\",\n    orange : \"orange\",\n    banana : \"bananas\",\n    watermelons : \"watermelons\"\n}); //\"applesssss, ####orange,    bananas and watermelon\"\n```     \n\n\n\n\n**`style`**\n\nStyles a string according to the specified styles.\n\n* bold\n* bright\n* italic\n* underline\n* inverse\n* crossedOut\n* blink\n* red\n* green\n* yellow\n* blue\n* magenta\n* cyan\n* white\n* redBackground\n* greenBackground\n* yellowBackground\n* blueBackground\n* magentaBackground\n* cyanBackground\n* whiteBackground\n* grey\n* black\n\n\n```javascript\n//style a string red\nstring.style('myStr', 'red');\n//style a string red and bold\nstring.style('myStr', ['red', bold]);\n```\n\n\n**`characters`**\n\n* `SMILEY` : `☺`\n* `SOLID_SMILEY` : `☻`\n* `HEART` : `♥`\n* `DIAMOND` : `♦`\n* `CLOVE` : `♣`\n* `SPADE` : `♠`\n* `DOT` : `•`\n* `SQUARE_CIRCLE` : `◘`\n* `CIRCLE` : `○`\n* `FILLED_SQUARE_CIRCLE` : `◙`\n* `MALE` : `♂`\n* `FEMALE` : `♀`\n* `EIGHT_NOTE` : `♪`\n* `DOUBLE_EIGHTH_NOTE` : `♫`\n* `SUN` : `☼`\n* `PLAY` : `►`\n* `REWIND` : `◄`\n* `UP_DOWN` : `↕`\n* `PILCROW` : `¶`\n* `SECTION` : `§`\n* `THICK_MINUS` : `▬`\n* `SMALL_UP_DOWN` : `↨`\n* `UP_ARROW` : `↑`\n* `DOWN_ARROW` : `↓`\n* `RIGHT_ARROW` : `→`\n* `LEFT_ARROW` : `←`\n* `RIGHT_ANGLE` : `∟`\n* `LEFT_RIGHT_ARROW` : `↔`\n* `TRIANGLE` : `▲`\n* `DOWN_TRIANGLE` : `▼`\n* `HOUSE` : `⌂`\n* `C_CEDILLA` : `Ç`\n* `U_UMLAUT` : `ü`\n* `E_ACCENT` : `é`\n* `A_LOWER_CIRCUMFLEX` : `â`\n* `A_LOWER_UMLAUT` : `ä`\n* `A_LOWER_GRAVE_ACCENT` : `à`\n* `A_LOWER_CIRCLE_OVER` : `å`\n* `C_LOWER_CIRCUMFLEX` : `ç`\n* `E_LOWER_CIRCUMFLEX` : `ê`\n* `E_LOWER_UMLAUT` : `ë`\n* `E_LOWER_GRAVE_ACCENT` : `è`\n* `I_LOWER_UMLAUT` : `ï`\n* `I_LOWER_CIRCUMFLEX` : `î`\n* `I_LOWER_GRAVE_ACCENT` : `ì`\n* `A_UPPER_UMLAUT` : `Ä`\n* `A_UPPER_CIRCLE` : `Å`\n* `E_UPPER_ACCENT` : `É`\n* `A_E_LOWER` : `æ`\n* `A_E_UPPER` : `Æ`\n* `O_LOWER_CIRCUMFLEX` : `ô`\n* `O_LOWER_UMLAUT` : `ö`\n* `O_LOWER_GRAVE_ACCENT` : `ò`\n* `U_LOWER_CIRCUMFLEX` : `û`\n* `U_LOWER_GRAVE_ACCENT` : `ù`\n* `Y_LOWER_UMLAUT` : `ÿ`\n* `O_UPPER_UMLAUT` : `Ö`\n* `U_UPPER_UMLAUT` : `Ü`\n* `CENTS` : `¢`\n* `POUND` : `£`\n* `YEN` : `¥`\n* `CURRENCY` : `¤`\n* `PTS` : `₧`\n* `FUNCTION` : `ƒ`\n* `A_LOWER_ACCENT` : `á`\n* `I_LOWER_ACCENT` : `í`\n* `O_LOWER_ACCENT` : `ó`\n* `U_LOWER_ACCENT` : `ú`\n* `N_LOWER_TILDE` : `ñ`\n* `N_UPPER_TILDE` : `Ñ`\n* `A_SUPER` : `ª`\n* `O_SUPER` : `º`\n* `UPSIDEDOWN_QUESTION` : `¿`\n* `SIDEWAYS_L` : `⌐`\n* `NEGATION` : `¬`\n* `ONE_HALF` : `½`\n* `ONE_FOURTH` : `¼`\n* `UPSIDEDOWN_EXCLAMATION` : `¡`\n* `DOUBLE_LEFT` : `«`\n* `DOUBLE_RIGHT` : `»`\n* `LIGHT_SHADED_BOX` : `░`\n* `MEDIUM_SHADED_BOX` : `▒`\n* `DARK_SHADED_BOX` : `▓`\n* `VERTICAL_LINE` : `│`\n* `MAZE__SINGLE_RIGHT_T` : `┤`\n* `MAZE_SINGLE_RIGHT_TOP` : `┐`\n* `MAZE_SINGLE_RIGHT_BOTTOM_SMALL` : `┘`\n* `MAZE_SINGLE_LEFT_TOP_SMALL` : `┌`\n* `MAZE_SINGLE_LEFT_BOTTOM_SMALL` : `└`\n* `MAZE_SINGLE_LEFT_T` : `├`\n* `MAZE_SINGLE_BOTTOM_T` : `┴`\n* `MAZE_SINGLE_TOP_T` : `┬`\n* `MAZE_SINGLE_CENTER` : `┼`\n* `MAZE_SINGLE_HORIZONTAL_LINE` : `─`\n* `MAZE_SINGLE_RIGHT_DOUBLECENTER_T` : `╡`\n* `MAZE_SINGLE_RIGHT_DOUBLE_BL` : `╛`\n* `MAZE_SINGLE_RIGHT_DOUBLE_T` : `╢`\n* `MAZE_SINGLE_RIGHT_DOUBLEBOTTOM_TOP` : `╖`\n* `MAZE_SINGLE_RIGHT_DOUBLELEFT_TOP` : `╕`\n* `MAZE_SINGLE_LEFT_DOUBLE_T` : `╞`\n* `MAZE_SINGLE_BOTTOM_DOUBLE_T` : `╧`\n* `MAZE_SINGLE_TOP_DOUBLE_T` : `╤`\n* `MAZE_SINGLE_TOP_DOUBLECENTER_T` : `╥`\n* `MAZE_SINGLE_BOTTOM_DOUBLECENTER_T` : `╨`\n* `MAZE_SINGLE_LEFT_DOUBLERIGHT_BOTTOM` : `╘`\n* `MAZE_SINGLE_LEFT_DOUBLERIGHT_TOP` : `╒`\n* `MAZE_SINGLE_LEFT_DOUBLEBOTTOM_TOP` : `╓`\n* `MAZE_SINGLE_LEFT_DOUBLETOP_BOTTOM` : `╙`\n* `MAZE_SINGLE_LEFT_TOP` : `Γ`\n* `MAZE_SINGLE_RIGHT_BOTTOM` : `╜`\n* `MAZE_SINGLE_LEFT_CENTER` : `╟`\n* `MAZE_SINGLE_DOUBLECENTER_CENTER` : `╫`\n* `MAZE_SINGLE_DOUBLECROSS_CENTER` : `╪`\n* `MAZE_DOUBLE_LEFT_CENTER` : `╣`\n* `MAZE_DOUBLE_VERTICAL` : `║`\n* `MAZE_DOUBLE_RIGHT_TOP` : `╗`\n* `MAZE_DOUBLE_RIGHT_BOTTOM` : `╝`\n* `MAZE_DOUBLE_LEFT_BOTTOM` : `╚`\n* `MAZE_DOUBLE_LEFT_TOP` : `╔`\n* `MAZE_DOUBLE_BOTTOM_T` : `╩`\n* `MAZE_DOUBLE_TOP_T` : `╦`\n* `MAZE_DOUBLE_LEFT_T` : `╠`\n* `MAZE_DOUBLE_HORIZONTAL` : `═`\n* `MAZE_DOUBLE_CROSS` : `╬`\n* `SOLID_RECTANGLE` : `█`\n* `THICK_LEFT_VERTICAL` : `▌`\n* `THICK_RIGHT_VERTICAL` : `▐`\n* `SOLID_SMALL_RECTANGLE_BOTTOM` : `▄`\n* `SOLID_SMALL_RECTANGLE_TOP` : `▀`\n* `PHI_UPPER` : `Φ`\n* `INFINITY` : `∞`\n* `INTERSECTION` : `∩`\n* `DEFINITION` : `≡`\n* `PLUS_MINUS` : `±`\n* `GT_EQ` : `≥`\n* `LT_EQ` : `≤`\n* `THEREFORE` : `⌠`\n* `SINCE` : `∵`\n* `DOESNOT_EXIST` : `∄`\n* `EXISTS` : `∃`\n* `FOR_ALL` : `∀`\n* `EXCLUSIVE_OR` : `⊕`\n* `BECAUSE` : `⌡`\n* `DIVIDE` : `÷`\n* `APPROX` : `≈`\n* `DEGREE` : `°`\n* `BOLD_DOT` : `∙`\n* `DOT_SMALL` : `·`\n* `CHECK` : `√`\n* `ITALIC_X` : `✗`\n* `SUPER_N` : `ⁿ`\n* `SQUARED` : `²`\n* `CUBED` : `³`\n* `SOLID_BOX` : `■`\n* `PERMILE` : `‰`\n* `REGISTERED_TM` : `®`\n* `COPYRIGHT` : `©`\n* `TRADEMARK` : `™`\n* `BETA` : `β`\n* `GAMMA` : `γ`\n* `ZETA` : `ζ`\n* `ETA` : `η`\n* `IOTA` : `ι`\n* `KAPPA` : `κ`\n* `LAMBDA` : `λ`\n* `NU` : `ν`\n* `XI` : `ξ`\n* `OMICRON` : `ο`\n* `RHO` : `ρ`\n* `UPSILON` : `υ`\n* `CHI_LOWER` : `φ`\n* `CHI_UPPER` : `χ`\n* `PSI` : `ψ`\n* `ALPHA` : `α`\n* `ESZETT` : `ß`\n* `PI` : `π`\n* `SIGMA_UPPER` : `Σ`\n* `SIGMA_LOWER` : `σ`\n* `MU` : `µ`\n* `TAU` : `τ`\n* `THETA` : `Θ`\n* `OMEGA` : `Ω`\n* `DELTA` : `δ`\n* `PHI_LOWER` : `φ`\n* `EPSILON` : \"ε\"",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/string-extended/issues"
  },
  "homepage": "https://github.com/doug-martin/string-extended",
  "_id": "string-extended@0.0.8",
  "dist": {
    "shasum": "6334bfb72fb97e81d338c0e045d7e15d84ce8280"
  },
  "_from": "string-extended@0.0.8",
  "_resolved": "https://registry.npmjs.org/string-extended/-/string-extended-0.0.8.tgz"
}
