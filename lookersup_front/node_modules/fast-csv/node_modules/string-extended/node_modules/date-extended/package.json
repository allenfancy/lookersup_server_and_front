{
  "name": "date-extended",
  "version": "0.0.6",
  "description": "Additional date extensions with a chainable api",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/date-extended.git"
  },
  "keywords": [
    "Date",
    "extender",
    "utilities"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": [
      "ie/8..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "array-extended": "~0.0.3"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "grunt-it": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/date-extended.png?branch=master)]((https://travis-ci.org/doug-martin/date-extended)\n\n[![browser support](https://ci.testling.com/doug-martin/date-extended.png)](https://ci.testling.com/doug-martin/date-extended)\n\n# date-extended\n\n`date-extended` is a Javascript library that can be used standalone or incorporated into [`extended`](https://github.com/doug-martin/extended)\n\n```javascript\nvar date = require(\"date-extended\");\n```\n\nOr\n\n```javascript\nvar myextended = require(\"extended\")\n\t.register(require(\"date-extended\"));\n```\n\n## Installation\n\n```\nnpm install date-extended\n```\n\nOr [download the source](https://raw.github.com/doug-martin/date-extended/master/index.js) ([minified](https://raw.github.com/doug-martin/date-extended/master/date-extended.min.js))\n\n## Usage\n\n\n**`getDaysInMonth`**\n\nReturns the number of days in the month of a date\n\n```javascript\n\n date.getDaysInMonth(new Date(2006, 1, 1)); //28\n date.getDaysInMonth(new Date(2004, 1, 1)); //29\n date.getDaysInMonth(new Date(2006, 2, 1)); //31\n date.getDaysInMonth(new Date(2006, 3, 1)); //30\n\n\n date(new Date(2006, 4, 1)).getDaysInMonth().value(); //31\n date(new Date(2006, 5, 1)).getDaysInMonth().value(); //30\n date(new Date(2006, 6, 1)).getDaysInMonth(); //31\n```\n\n**`isLeapYear`**\n\nDetermines if a date is a leap year\n\n```javascript\n\n date.isLeapYear(new Date(1600, 0, 1)); //true\n date.isLeapYear(new Date(2006, 0, 1)); //false\n date.isLeapYear(new Date(2004, 0, 1)); //true\n\n date(new Date(1900, 0, 1)).isLeapYear(); //false\n date(new Date(2000, 0, 1)).isLeapYear(); //true\n date(new Date(1800, 0, 1)).isLeapYear(); //false\n```\n\n**`isWeekend`**\n\nDetermines if a date is on a weekend\n\n```javascript\n\nvar thursday = new Date(2006, 8, 21);\ndate.isWeekend(thursday)); //false\n\nvar saturday = new Date(2006, 8, 23);\ndate(saturday).isWeekend(); //true\n\nvar sunday = new Date(2006, 8, 24);\ndate.isWeekend(sunday); //true\n\nvar monday = new Date(2006, 8, 25);\ndate(monday).isWeekend()); //false\n```\n\n**`getTimezoneName`**\nGet the timezone of a date\n\n**`compare`**\nCompares two dates\n\n```javascript\n\nvar d1 = new Date();\nd1.setHours(0);\ndate.compare(d1, d1); // 0\n\nvar d1 = new Date(), d2 = new Date();\nd1.setHours(0);\nd2.setFullYear(2005);\nd2.setHours(12);\n\ndate.compare(d1, d2, \"date\"); // 1\ndate(d1).compare(d2, \"datetime\"); // 1\n\nvar d1 = new Date(), d2 = new Date();\nd1.setHours(0);\nd2.setFullYear(2005);\nd2.setHours(12);\n\ndate(d2).compare(d1, \"date\"); // -1\ndate(d1).compare(d2, \"time\"); //-1\n```\n\n**`add`**\n\nAdds a specified interval and amount to a date\n\n * day | days\n * weekday | weekdays\n * year | years\n * week | weeks\n * quarter | quarters\n * months | months\n * hour | hours\n * minute | minutes\n * second | seconds\n * millisecond | milliseconds\n\n```javascript\nvar dtA = new Date(2005, 11, 27);\ndate.add(dtA, \"year\", 1); //new Date(2006, 11, 27);\ndate(dtA).add(\"years\", 1).value(); //new Date(2006, 11, 27);\n\ndtA = new Date(2000, 0, 1);\ndate.add(dtA, \"quarter\", 1); //new Date(2000, 3, 1);\ndate(dtA).add(\"quarters\", 1).value(); //new Date(2000, 3, 1);\n\ndtA = new Date(2000, 0, 1);\ndate.add(dtA, \"month\", 1); //new Date(2000, 1, 1);\ndate(dtA).add(\"months\", 1).value(); //new Date(2000, 1, 1);\n\ndtA = new Date(2000, 0, 31);\ndate.add(dtA, \"month\", 1); //new Date(2000, 1, 29);\ndate(dtA).add(\"months\", 1).value(); //new Date(2000, 1, 29);\n\ndtA = new Date(2000, 0, 1);\ndate.add(dtA, \"week\", 1); //new Date(2000, 0, 8);\ndate(dtA).add(\"weeks\", 1).value(); //new Date(2000, 0, 8);\n\ndtA = new Date(2000, 0, 1);\ndate(dtA).add(\"day\", 1).value(); //new Date(2000, 0, 2);\n\ndtA = new Date(2000, 0, 1);\ndate(dtA).add(\"weekday\", 1); //new Date(2000, 0, 3);\n\ndtA = new Date(2000, 0, 1, 11);\ndate(dtA).add(\"hour\", 1).value(); //new Date(2000, 0, 1, 12);\n\ndtA = new Date(2000, 11, 31, 23, 59);\ndate.add(dtA, \"minute\", 1); //new Date(2001, 0, 1, 0, 0);\n\ndtA = new Date(2000, 11, 31, 23, 59, 59);\ndate.add(dtA, \"second\", 1); //new Date(2001, 0, 1, 0, 0, 0);\n\ndtA = new Date(2000, 11, 31, 23, 59, 59, 999);\ndate.add(dtA, \"millisecond\", 1); //new Date(2001, 0, 1, 0, 0, 0, 0);\n```\n\n**`difference`**\n\nFinds the difference between two dates based on the specified interval\n\n * day | days\n * weekday | weekdays\n * year | years\n * week | weeks\n * quarter | quarters\n * months | months\n * hour | hours\n * minute | minutes\n * second | seconds\n * millisecond | milliseconds\n\n```javascript\n\nvar dtA, dtB;\n\ndtA = new Date(2005, 11, 27);\ndtB = new Date(2006, 11, 27);\ndate.difference(dtA, dtB, \"year\"); //1\n\ndtA = new Date(2000, 1, 29);\ndtB = new Date(2001, 2, 1);\ndate.difference(dtA, dtB, \"quarter\"); //4\ndate(dtA).difference(dtB, \"month\").value(); //13\n\ndtA = new Date(2000, 1, 1);\ndtB = new Date(2000, 1, 8);\ndate.difference(dtA, dtB, \"week\"); //1\n\ndtA = new Date(2000, 1, 29);\ndtB = new Date(2000, 2, 1);\ndate(dtA).difference(dtB, \"day\").value(); //1\n\ndtA = new Date(2006, 7, 3);\ndtB = new Date(2006, 7, 11);\ndate.difference(dtA, dtB, \"weekday\"); //6\n\ndtA = new Date(2000, 11, 31, 23);\ndtB = new Date(2001, 0, 1, 0);\ndate(dtA).difference(dtB, \"hour\").value(); //1\n\ndtA = new Date(2000, 11, 31, 23, 59);\ndtB = new Date(2001, 0, 1, 0, 0);\ndate.difference(dtA, dtB, \"minute\"); //1\n\ndtA = new Date(2000, 11, 31, 23, 59, 59);\ndtB = new Date(2001, 0, 1, 0, 0, 0);\ndate(dtA).difference(dtB, \"second\").value(); //1\n\ndtA = new Date(2000, 11, 31, 23, 59, 59, 999);\ndtB = new Date(2001, 0, 1, 0, 0, 0, 0);\ndate.difference(dtA, dtB, \"millisecond\"); //1\n````\n\n\n**`format`**\n\nFormats a date to the specified format string\n\n * `G`    Era designator    Text    AD\n * `y`    Year    Year    1996; 96\n * `M`    Month in year    Month    July; Jul; 07\n * `w`    Week in year    Number    27\n * `W`    Week in month    Number    2\n * `D`    Day in year    Number    189\n * `d`    Day in month    Number    10\n * `E`    Day in week    Text    Tuesday; Tue\n * `a`    Am/pm marker    Text    PM\n * `H`    Hour in day (0-23)    Number    0\n * `k`    Hour in day (1-24)    Number    24\n * `K`    Hour in am/pm (0-11)    Number    0\n * `h`    Hour in am/pm (1-12)    Number    12\n * `m`    Minute in hour    Number    30\n * `s`    Second in minute    Number    55\n * `S`    Millisecond    Number    978\n * `z`    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00\n * `Z`    Time zone    RFC 822 time zone    -0800 \n\n```javascript\nvar date = new Date(2006, 7, 11, 0, 55, 12, 345);\ndate.format(date, \"EEEE, MMMM dd, yyyy\"); //\"Friday, August 11, 2006\"\ndate(date).format(\"M/dd/yy\").value(); //\"8/11/06\"\ndate.format(date, \"E\"); //\"6\"\ndate(date).format(\"h:m a\").value(); //\"12:55 AM\"\ndate.format(date, 'h:m:s'); //\"12:55:12\"\ndate(date).format('h:m:s.SS').value(); //\"12:55:12.35\"\ndate.format(date, 'k:m:s.SS'); //\"24:55:12.35\"\ndate(date).format('H:m:s.SS').value(); //\"0:55:12.35\"\ndate.format(date, \"ddMMyyyy\"); //\"11082006\"\n```\n\n**`parseDate`**\n\nParses a date string into a date object\n\n * `G`    Era designator    Text    AD\n * `y`    Year    Year    1996; 96\n * `M`    Month in year    Month    July; Jul; 07\n * `w`    Week in year    Number    27\n * `W`    Week in month    Number    2\n * `D`    Day in year    Number    189\n * `d`    Day in month    Number    10\n * `E`    Day in week    Text    Tuesday; Tue\n * `a`    Am/pm marker    Text    PM\n * `H`    Hour in day (0-23)    Number    0\n * `k`    Hour in day (1-24)    Number    24\n * `K`    Hour in am/pm (0-11)    Number    0\n * `h`    Hour in am/pm (1-12)    Number    12\n * `m`    Minute in hour    Number    30\n * `s`    Second in minute    Number    55\n * `S`    Millisecond    Number    978\n * `z`    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00\n * `Z`    Time zone    RFC 822 time zone    -0800\n\n```javascript\n var aug_11_2006 = new Date(2006, 7, 11, 0);\n date.parse(\"08/11/06\", \"MM/dd/yy\"); //aug_11_2006\n date.parse(\"11Aug2006\", 'ddMMMyyyy'); //aug_11_2006\n date.parse(\"Aug2006\", 'MMMyyyy'); //new Date(2006, 7, 1)\n date.parse(\"Aug 11, 2006\", \"MMM dd, yyyy\"); //aug_11_2006\n date.parse(\"August 11, 2006\", \"MMMM dd, yyyy\"); //aug_11_2006\n date.parse(\"Friday, August 11, 2006\", \"EEEE, MMMM dd, yyyy\"); //aug_11_2006\n```\n\n\n\n**FromNow and Ago**\n\nThe following are convenience methods for adding ad subtracting intervals from the current date.\n\n* `yearsFromNow` \n* `yearsAgo`\n* `monthsFromNow`\n* `monthsAgo`\n* `daysFromNow`\n* `daysAgo`\n* `hoursFromNow`\n* `hoursAgo`\n* `minutesFromNow`\n* `minutesAgo`\n* `secondsFromNow`\n* `secondsAgo`\n\n```javascript\n//two years ago\ndate(2).yearsAgo();\ndate.yearsAgo(2)\n\n//five hours from now\ndate(5).hoursFromNow();\ndate.hoursFromNow(5);\n\n//two seconds ago\ndate(2).secondsAgo();\ndate.secondsAgo(2)\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/date-extended/issues"
  },
  "homepage": "https://github.com/doug-martin/date-extended",
  "_id": "date-extended@0.0.6",
  "dist": {
    "shasum": "6732597e10700d3c6770796375d1588e835f966b"
  },
  "_from": "date-extended@~0.0.3",
  "_resolved": "https://registry.npmjs.org/date-extended/-/date-extended-0.0.6.tgz"
}
