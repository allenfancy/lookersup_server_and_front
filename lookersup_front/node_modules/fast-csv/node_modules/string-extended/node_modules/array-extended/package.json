{
  "name": "array-extended",
  "version": "0.0.11",
  "description": "Additional array extensions with a chainable api",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/array-extended.git"
  },
  "keywords": [
    "Array",
    "extender",
    "utilities"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": [
      "ie/8..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "arguments-extended": "~0.0.3"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-it": "~0.3.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/array-extended.png?branch=master)](https://travis-ci.org/doug-martin/array-extended)\n\n[![browser support](https://ci.testling.com/doug-martin/array-extended.png)](https://ci.testling.com/doug-martin/array-extended)\n\n# array-extended\n\n`array-extended` is a Javascript library that can be used standalone or incorporated into [`extended`](https://github.com/doug-martin/extended)\n\n```javascript\nvar array = require(\"array-extended\");\n```\n\nOr\n\n```javascript\nvar myextended = require(\"extended\")\n\t.register(require(\"array-extended\"));\n```\n\n## Installation\n\n```\nnpm install array-extended\n```\n\nOr [download the source](https://raw.github.com/doug-martin/array-extended/master/index.js) ([minified](https://raw.github.com/doug-martin/array-extended/master/array-extended.min.js))\n\n## Usage\n\n`array-extended` includes many useful methods that for array. All of the functions can be chained together using `array-exteded` as a function or you can use the functions directly as shown in the examples.\n\n The following native `ES5` methods are included for completeness.\n\n * `forEach`\n * `map`\n * `filter`\n * `reduce`\n * `reduceRight`\n * `some`\n * `every`\n * `indexOf`\n * `lastIndexOf`\n\n**Note** `forEach` returns the original array for chaining purposes.\n\n**`sum`**\n\nSums the values of an array.\n\n```javascript\n\narray.sum([1,2,3]); //6\n\narray([1,2,3]).sum().value(); //6\n\n```\n\n**`avg`**\n\nFinds the average of an array of numbers.\n\n```javascript\n\narray.avg([1,2,3]); //2\n\narray([1,2,3]).avg().value(); //2\n\n```\n\n**`sort`**\n\nSorts an array based on a property, by natural ordering, or by a custom comparator.\n\n**Note** this does not change the original array.\n\n```javascript\n\narray.sort([{a: 1},{a: 2},{a: -2}], \"a\"); //[{a: -2},{a: 1},{a: 2}];\n\narray([{a: 1},{a: 2},{a: -2}]).sort(\"a\"); //[{a: -2},{a: 1},{a: 2}];\n\n\n```\n\n**`min`**\n\nFinds the minimum value in an array based on a property, by natural ordering, or by a custom comparator.\n\n```javascript\n\narray.min([ 3, -3, -2, -1, 1, 2]); //-3\n\narray.min([{a: 1},{a: 2},{a: -2}], \"a\"); //{a : -2}\n\narray([ 3, -3, -2, -1, 1, 2]).min(); //-3\n\narray([{a: 1},{a: 2},{a: -2}]).min(\"a\"); //{a : -2}\n\n```\n\n**`max`**\n\nFinds the maximum value in an array based on a property, by natural ordering, or by a custom comparator.\n\n```javascript\n\narray.max([ 3, -3, -2, -1, 1, 2]); //2\n\narray.max([{a: 1},{a: 2},{a: -2}], \"a\"); //{a : 2}\n\narray([ 3, -3, -2, -1, 1, 2]).max(); //2\n\narray([{a: 1},{a: 2},{a: -2}]).max(\"a\"); //{a : 2}\n\n```\n\n**`difference`**\n\nFinds the difference between two arrays.\n\n```javascript\narray.difference([1, 2, 3], [2]); //[1, 3]\narray.difference([true, false], [false]); //[true]\narray.difference([\"a\", \"b\", 3], [3]); //[\"a\", \"b\"]\n\nvar a = , b = , c = ;\narray.difference([{a: 1}, {a: 2}, {a: 3}], [{a: 2}, {a: 3}]); //[{a: 1}]\n\narray([true, false]).difference([false]).value()// [true]\narray([1, 2, 3]).difference([2]).value()// [1, 3]\narray([1, 2, 3]).difference([2], [3]).value(); //[1]\narray([\"a\", \"b\", 3]).difference([3]).value(); [\"a\", \"b\"]\narray([{a: 1}, {a: 2}, {a: 3}]).difference([{a: 2}, {a: 3}]).value(); [{a: 1}]\n```\n\n**`unique`**\n\nRemoved duplicate values from an array.\n\n```javascript\n\narray.unique([1, 2, 2, 3, 3, 3, 4, 4, 4]); //[1, 2, 3, 4]\narray([1, 2, 2, 3, 3, 3, 4, 4, 4]).unique().value();  //[1, 2, 3, 4]\n\narray([\"a\", \"b\", \"b\"]).unique().value(); //[\"a\", \"b\"]\narray.unique([\"a\", \"b\", \"b\"]); //[\"a\", \"b\"]\n\n```\n\n**`rotate`**\n\nRotates an array by the number of places for 1 position by default.\n\n```javascript\n\nvar arr = array([\"a\", \"b\", \"c\", \"d\"])\narr.rotate().value();   //[\"b\", \"c\", \"d\", \"a\"]\narr.rotate(2).value();  //[\"c\", \"d\", \"a\", \"b\"]\narr.rotate(3).value();  //[\"d\", \"a\", \"b\", \"c\"]\narr.rotate(4).value();  //[\"a\", \"b\", \"c\", \"d\"]\narr.rotate(-1).value(); //[\"d\", \"a\", \"b\", \"c\"]\narr.rotate(-2).value(); //[\"c\", \"d\", \"a\", \"b\"]\narr.rotate(-3).value(); //[\"b\", \"c\", \"d\", \"a\"]\narr.rotate(-4).value(); //[\"a\", \"b\", \"c\", \"d\"]\n\nvar arr = [\"a\", \"b\", \"c\", \"d\"];\narray.rotate(arr);     //[\"b\", \"c\", \"d\", \"a\"]\narray.rotate(arr, 2);  //[\"c\", \"d\", \"a\", \"b\"]\narray.rotate(arr, 3);  //[\"d\", \"a\", \"b\", \"c\"]\narray.rotate(arr, 4);  //[\"a\", \"b\", \"c\", \"d\"]\narray.rotate(arr, -1)  //[\"d\", \"a\", \"b\", \"c\"]\narray.rotate(arr, -2); //[\"c\", \"d\", \"a\", \"b\"]\narray.rotate(arr, -3); //[\"b\", \"c\", \"d\", \"a\"]\narray.rotate(arr, -4); //[\"a\", \"b\", \"c\", \"d\"]\n\n```\n\n**`permutations`**\n\nFinds all permutations of an array.\n\n```javascript\n\narray([1, 2, 3]).permutations(); //[\n                                 //   [ 1, 2, 3 ],\n                                 //   [ 1, 3, 2 ],\n                                 //   [ 2, 3, 1 ],\n                                 //   [ 2, 1, 3 ],\n                                 //   [ 3, 1, 2 ],\n                                 //   [ 3, 2, 1 ]\n                                 //]\n\narray([1, 2, 3]).permutations(2);//[\n                                 //   [ 1, 2],\n                                 //   [ 1, 3],\n                                 //   [ 2, 3],\n                                 //   [ 2, 1],\n                                 //   [ 3, 1],\n                                 //   [ 3, 2]\n                                 //]\n\narray.permutations([1, 2, 3]);   //[\n                                 //   [ 1, 2, 3 ],\n                                 //   [ 1, 3, 2 ],\n                                 //   [ 2, 3, 1 ],\n                                 //   [ 2, 1, 3 ],\n                                 //   [ 3, 1, 2 ],\n                                 //   [ 3, 2, 1 ]\n                                 //]\n\narray.permutations(([1, 2, 3], 2);//[\n                                 //   [ 1, 2],\n                                 //   [ 1, 3],\n                                 //   [ 2, 3],\n                                 //   [ 2, 1],\n                                 //   [ 3, 1],\n                                 //   [ 3, 2]\n                                 //]\n\n```\n\n**`zip`**\n\nZips the values of multiple arrays into a single array.\n\n```javascript\n\narray([1]).zip([2], [3]).value();                    //[\n                                                     //  [ 1, 2, 3 ]\n                                                     //];\n\narray([1, 2]).zip([2], [3]).value();                 //[\n                                                     //  [ 1, 2, 3 ],\n                                                     //  [2, null, null]\n                                                     //]\n\narray([1, 2, 3]).zip([ 4, 5, 6 ], b).value();        //[\n                                                     //  [1, 4, 7],\n                                                     //  [2, 5, 8],\n                                                     //  [3, 6, 9]\n                                                     //]\n\narray([1, 2]).zip([ 4, 5, 6 ],  [7, 8, 9 ]).value(); //[\n                                                     //  [1, 4, 7],\n                                                     //  [2, 5, 8]\n                                                     //]\n\narray([ 4, 5, 6 ]).zip([1, 2], [8]).value(),         //[\n                                                     //  [4, 1, 8],\n                                                     //  [5, 2, null],\n                                                     //  [6, null, null]\n                                                     //]\n\n\narray.zip([1], [2], [3]);                   //[\n                                            //  [ 1, 2, 3 ]\n                                            //]\n\narray.zip([1, 2], [2], [3]);                //[\n                                            //  [ 1, 2, 3 ],\n                                            //  [2, null, null]\n                                            //]\n\narray.zip([1, 2, 3], [4,5,6],  [7, 8, 9 ]); //[\n                                            //  [1, 4, 7],\n                                            //  [2, 5, 8],\n                                            //  [3, 6, 9]\n                                            //]\n\narray.zip([1, 2], [4,5,6],  [7, 8, 9 ]);    //[\n                                            //  [1, 4, 7],\n                                            //  [2, 5, 8]\n                                            //]\n\narray.zip([ 4, 5, 6 ], [1, 2], [8]);        //[\n                                            //  [4, 1, 8],\n                                            //  [5, 2, null],\n                                            //  [6, null, null]\n                                            //]\n\n```\n\n**`transpose`**\n\nTranspose a multi dimensional array.\n\n```javascript\narray([[1, 2, 3],[4, 5, 6]]).transpose().value();   //[ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\narray([[1, 2],[3, 4],[5, 6]]).transpose().value();  //[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]\narray([[1],[3, 4],[5, 6]]).transpose().value();     //[ [1] ]\n\n\narray.transpose([[1, 2, 3],[4, 5, 6]]);             //[ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\narray.transpose([[1, 2],[3, 4],[5, 6]]);            //[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]\narray.transpose([[1],[3, 4],[5, 6]]);               //[ [1] ]\n```\n\n**`valuesAt`**\n\nGathers values and the specified indexes.\n\n```javascript\n\nvar arr = array([\"a\", \"b\", \"c\", \"d\"]);\narr.valuesAt(1, 2, 3).value();      //[\"b\", \"c\", \"d\"]\narr.valuesAt(1, 2, 3, 4).value();   //[\"b\", \"c\", \"d\", null]\narr.valuesAt(0, 3).value();         //[\"a\", \"d\"]\n\narr = [\"a\", \"b\", \"c\", \"d\"];\narray.valuesAt(arr, 1, 2, 3);       //[\"b\", \"c\", \"d\"]\narray.valuesAt(arr, 1, 2, 3, 4);    //[\"b\", \"c\", \"d\", null]\narray.valuesAt(arr, 0, 3);          //[\"a\", \"d\"]\n```\n\n**`union`**\n\nFinds the union of two arrays.\n\n```javascript\narray([\"a\", \"b\", \"c\"]).union([\"b\", \"c\", \"d\"]).value();  //[\"a\", \"b\", \"c\", \"d\"]);\narray([\"a\"]).union([\"b\"], [\"c\"], [\"d\"], [\"c\"]).value(); //[\"a\", \"b\", \"c\", \"d\"]);\n\narray.union([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"d\"]);          //[\"a\", \"b\", \"c\", \"d\"]);\narray.union([\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"c\"]);         //[\"a\", \"b\", \"c\", \"d\"]);\n```\n\n**`intersect`**\n\nFinds the intersection of two arrays.\n\n```javascript\narray([1, 2]).intersect([2, 3], [2, 3, 5]).value();                     //[2]);\narray([1, 2, 3]).intersect([2, 3, 4, 5], [2, 3, 5]).value();            //[2, 3]);\narray([1, 2, 3, 4]).intersect([2, 3, 4, 5], [2, 3, 4, 5]).value();      //[2, 3, 4]);\narray([1, 2, 3, 4, 5]).intersect([1, 2, 3, 4, 5], [1, 2, 3]).value();   //[1, 2, 3]);\narray([[1, 2, 3, 4, 5],[1, 2, 3, 4, 5],[1, 2, 3]]).intersect().value(); //[1, 2, 3]);\n\narray.intersect([1, 2], [2, 3], [2, 3, 5]);                             //[2]\narray.intersect([1, 2, 3], [2, 3, 4, 5], [2, 3, 5]);                    //[2, 3]\narray.intersect([1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 5]);              //[2, 3, 4]\narray.intersect([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3]);           //[1, 2, 3]);\narray.intersect([[1, 2, 3, 4, 5],[1, 2, 3, 4, 5], [1, 2, 3]]);          //[1, 2, 3]);\n```\n\n**`powerSet`**\n\nFinds the powerset of a given array.\n\n```javascript\narray([1, 2, 3]).powerSet().value();\narray.powerSet([1, 2, 3]);\n//[\n//  [],\n//  [ 1 ],\n//  [ 2 ],\n//  [ 1, 2 ],\n//  [ 3 ],\n//  [ 1, 3 ],\n//  [ 2, 3 ],\n//  [ 1, 2, 3 ]\n//]\n```\n\n**`cartesian`**\n\nFinds the cartesian product of arrays.\n\n```javascript\narray([1, 2]).cartesian([2, 3]).value();\narray.cartesian([1, 2], [2, 3]);\n//[\n//  [1, 2],\n//  [1, 3],\n//  [2, 2],\n//  [2, 3]\n//]\n```\n\n**`compact`**\n\nCompacts the values of an array.\n\n```javascript\narray([1, null, null, x, 2]).compact().value(); //[1, 2]\n\narray([1, 2]).compact().value();  //[1, 2]\n\n\narray.compact([1, null, null, x, 2]); //[1, 2]\narray.compact([1, 2]); //[1, 2]\n```\n\n**`multiply`**\n\nRepoduces the values in an array the given number of times.\n\n```javascript\narray([1, 2]).multiply(2).value(); //[1, 2, 1, 2, 1, 2]\n\narray.multiply([1, 2, 3], 2); //[1, 2, 3, 1, 2, 3]\n```\n\n**`flatten`**\n\nFlatten multiple arrays into a single array.\n\n```javascript\n\narray([ [1], [2], [3] ]).flatten().value(); //[1, 2, 3]\n\narray.flatten([1, 2], [2, 3], [3, 4]); //[1, 2, 2, 3, 3, 4]\n\n```\n\n**`pluck`**\n\nPluck properties from values in an array.\n\n```javascript\nvar arr = [\n    {name: {first: \"Fred\", last: \"Jones\"}, age: 50, roles: [\"a\", \"b\", \"c\"]},\n    {name: {first: \"Bob\", last: \"Yukon\"}, age: 40, roles: [\"b\", \"c\"]},\n    {name: {first: \"Alice\", last: \"Palace\"}, age: 35, roles: [\"c\"]},\n    {name: {first: \"Johnny\", last: \"P.\"}, age: 56, roles: []}\n];\n\narray.pluck(arr, \"name.first\"); //[\"Fred\", \"Bob\", \"Alice\", \"Johnny\"]\narray(arr).pluck(\"age\"); //[50, 40, 35, 56]\n\n```\n\n**`invoke`**\n\nInvokes the specified method on each value in an array.\n\n```javascript\n\nfunction person(name, age) {\n    return {\n        getName: function () {\n            return name;\n        },\n\n        getOlder: function () {\n            age++;\n            return this;\n        },\n\n        getAge: function () {\n            return age;\n        }\n    };\n};\n\nvar arr = [person(\"Bob\", 40), person(\"Alice\", 35), person(\"Fred\", 50), person(\"Johnny\", 56)];\n\narray.invoke(arr, \"getName\"); //[\"Bob\", \"Alice\", \"Fred\", \"Johnny\"];\narray(arr).invoke(\"getName\").value(); //[\"Bob\", \"Alice\", \"Fred\", \"Johnny\"];\n\narray(arr).invoke(\"getOlder\").invoke(\"getAge\").value(); //[41, 36, 51, 57];\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/array-extended/issues"
  },
  "homepage": "https://github.com/doug-martin/array-extended",
  "_id": "array-extended@0.0.11",
  "dist": {
    "shasum": "364f811107757b28be7ec191c6c874c0c37ee05a"
  },
  "_from": "array-extended@~0.0.4",
  "_resolved": "https://registry.npmjs.org/array-extended/-/array-extended-0.0.11.tgz"
}
