{
  "name": "crc-32",
  "version": "0.2.2",
  "author": {
    "name": "sheetjs"
  },
  "description": "Pure-JS CRC-32",
  "keywords": [
    "crc32",
    "checksum",
    "crc"
  ],
  "main": "./crc32",
  "devDependencies": {
    "mocha": "",
    "xlsjs": "",
    "uglify-js": "",
    "codepage": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-crc32.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test"
  },
  "config": {
    "blanket": {
      "pattern": "crc32.js"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-crc32/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# crc32\n\nStandard CRC-32 algorithm implementation in JS (for the browser and nodejs).\nEmphasis on correctness and performance.\n\n## Installation\n\nIn [nodejs](https://www.npmjs.org/package/crc-32):\n\n    npm install crc-32\n\nIn the browser:\n\n    <script lang=\"javascript\" src=\"crc32.js\"></script>\n\nThe browser exposes a variable CRC32\n\n## Usage\n\n- `CRC32.buf(byte array or buffer)` assumes the argument is a set of 8 bit\n  unsigned integers (e.g. nodejs `Buffer` or simple array of ints)\n\n- `CRC32.bstr(binary string)` interprets the argument as a binary string where\n  the `i`-th byte is `str.charCodeAt(i)`\n\n- `CRC32.str(string)` interprets the argument as a standard JS string\n\n## Testing\n\n`make test` will run the nodejs-based test.  To run the in-browser tests, run a\nlocal server and go to the `ctest` directory.  To update the browser artifacts,\nrun `make ctest`.\n\n## Performance\n\n`make perf` will run algorithmic performance tests (which should justify certain\ndecisions in the code).  \n\n`make perf-all` compares the performance of various crc-32 algorithms that\nimplement the correct form (note that the SSE intrinsic is designed for the \nCRC32C checksum and uses a different polynomial).\n\nUnexpected code patterns were based on performance testing in node and browser:\n\n- [Loop unrolling helps!](http://jsperf.com/crc32-table/2)\n\n## In the future ... \n\n- Specifying an arbitrary initial CRC value\n\n- Supporting different polynomials (e.g. CRC32C)\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n[![Build Status](https://travis-ci.org/SheetJS/js-crc32.svg?branch=master)](https://travis-ci.org/SheetJS/js-crc32)\n\n[![Coverage Status](https://img.shields.io/coveralls/SheetJS/js-crc32/master.svg)](https://coveralls.io/r/SheetJS/js-crc32?branch=master)\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/ee0e89f8b1d5b861ffbf264b8ce329a6 \"githalytics.com\")](http://githalytics.com/SheetJS/js-crc32)\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SheetJS/js-crc32",
  "_id": "crc-32@0.2.2",
  "dist": {
    "shasum": "77e825e806c2ba31d365775874ecb8a9d6f788c3"
  },
  "_from": "crc-32@",
  "_resolved": "https://registry.npmjs.org/crc-32/-/crc-32-0.2.2.tgz"
}
