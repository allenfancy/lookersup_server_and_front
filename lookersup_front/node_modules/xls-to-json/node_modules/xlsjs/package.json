{
  "name": "xlsjs",
  "version": "0.7.0",
  "author": {
    "name": "sheetjs"
  },
  "description": "Excel 5.0/95 and 97-2004 spreadsheet (BIFF5 XLS / BIFF8 XLS / XML 2003) parser",
  "keywords": [
    "excel",
    "xls",
    "office",
    "spreadsheet"
  ],
  "bin": {
    "xls": "./bin/xls.njs"
  },
  "main": "./xls",
  "dependencies": {
    "ssf": "~0.8.1",
    "codepage": "~1.3.1",
    "cfb": ">=0.10.0",
    "commander": ""
  },
  "devDependencies": {
    "mocha": "",
    "xlsx": "",
    "uglify-js": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-xls.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make mocha"
  },
  "config": {
    "blanket": {
      "pattern": "xls.js"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-xls/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# xls\n\nParser for Excel XLS (BIFF5/BIFF8) and 2003-2004 (XML) files.  Pure-JS cleanroom\nimplementation from the Microsoft Open Specifications and related documents.\n\n## Installation\n\nIn [nodejs](https://www.npmjs.org/package/xlsjs):\n\n    npm install xlsjs\n\nIn the browser:\n\n    <script src=\"xls.js\"></script>\n\nIn [bower](http://bower.io/search/?q=js-xls):\n\n    bower install js-xls\n\nCDNjs automatically pulls the latest version and makes all versions available at\n<http://cdnjs.com/libraries/xls>\n\n## Optional Modules\n\nThe nodejs version automatically requires modules for additional features.  Some\nof these modules are rather large in size and are only needed in special\ncircumstances, so they do not ship with the core.  For browser use, they must\nbe included directly:\n\n    <!-- international support from https://github.com/sheetjs/js-codepage -->\n    <script src=\"dist/cpexcel.js\"></script>\n\nAn appropriate version for each dependency is included in the dist/ directory.\n\nThe complete single-file version is generated at `dist/xls.full.min.js`\n\n## ECMAScript 5 compatibility\n\nSince xlsx.js uses ES5 functions like `Array#forEach`, older browsers require\n[Polyfills](http://git.io/QVh77g).  This repo and the gh-pages branch include\n[a shim](https://github.com/SheetJS/js-xls/blob/master/shim.js)\n\nTo use the shim, add the shim before the script tag that loads xlsx.js:\n\n    <script type=\"text/javascript\" src=\"/path/to/shim.js\"></script>\n\n## Parsing Workbooks\n\nFor parsing, the first step is to read the file.\n\n- nodejs:\n\n```\nif(typeof require !== 'undefined') XLS = require('xlsjs');\nvar workbook = XLS.readFile('test.xls');\n/* DO SOMETHING WITH workbook HERE */\n```\n\n- ajax:\n\n```\n/* set up XMLHttpRequest */\nvar url = \"test_files/formula_stress_test_ajax.xls\";\nvar oReq = new XMLHttpRequest();\noReq.open(\"GET\", url, true);\noReq.responseType = \"arraybuffer\";\n\noReq.onload = function(e) {\n  var arraybuffer = oReq.response;\n\n  /* convert data to binary string */\n  var data = new Uint8Array(arraybuffer);\n  var arr = new Array();\n  for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n  var bstr = arr.join(\"\");\n\n  /* Call XLS */\n  var workbook = XLS.read(bstr, {type:\"binary\"});\n\n  /* DO SOMETHING WITH workbook HERE */\n}\n\noReq.send();\n```\n\n- html5 drag-and-drop using readAsBinaryString:\n\n```\n/* set up drag-and-drop event */\nfunction handleDrop(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var files = e.dataTransfer.files;\n  var i,f;\n  for (i = 0, f = files[i]; i != files.length; ++i) {\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      /* if binary string, read with type 'binary' */\n      var wb = XLS.read(data, {type: 'binary'});\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    reader.readAsBinaryString(f);\n  }\n}\ndrop_dom_element.addEventListener('drop', handleDrop, false);\n```\n\nThis example gets the value of cell A1 of the first worksheet:\n\n```\nvar sheet_name_list = workbook.SheetNames;\nvar Sheet1A1 = workbook.Sheets[sheet_name_list[0]]['A1'].v;\n```\n\nComplete examples:\n\n- <http://oss.sheetjs.com/js-xls/> HTML5 File API / Base64 Text / Web Workers\n\nNote that older versions of IE does not support HTML5 File API, so the base64\nmode is provided for testing.  On OSX you can get the base64 encoding with:\n\n    $ <target_file.xls base64 | pbcopy\n\n- <http://oss.sheetjs.com/js-xls/ajax.html> XMLHttpRequest\n\n- <https://github.com/SheetJS/js-xls/blob/master/bin/xls.njs> nodejs\n\nThe nodejs version installs a binary `xls` which can read XLS and XML2003\nfiles and output the contents in various formats.  The source is available at\n`xls.njs` in the bin directory.\n\nSome helper functions in `XLS.utils` generate different views of the sheets:\n\n- `XLS.utils.sheet_to_csv` generates CSV\n- `XLS.utils.sheet_to_json` generates an array of objects\n- `XLS.utils.get_formulae` generates a list of formulae\n\n\n## Interface\n\n`XLS` is the exposed variable in the browser and the exported nodejs variable\n\n\n`XLS.read(data, read_opts)` attempts to parse `data`.\n\n`XLS.readFile(filename, read_opts)` attempts to read `filename` and parse.\n\n## Cell Object Description\n\njs-xls conforms to the Common Spreadsheet Format (CSF):\n\n`.SheetNames` is an ordered list of the sheets in the workbook\n\n`.Sheets[sheetname]` returns a data structure representing the sheet.  Each key\nthat does not start with `!` corresponds to a cell (using `A-1` notation).\n\n`.Sheets[sheetname][address]` returns the specified cell:\n\n- `.v` : the raw value of the cell\n- `.w` : the formatted text of the cell (if applicable)\n- `.t` : the type of the cell (constrained to the enumeration `ST_CellType` as\n  documented in page 4215 of ISO/IEC 29500-1:2012(E) )\n- `.f` : the formula of the cell (if applicable)\n- `.z` : the number format string associated with the cell (if requested)\n\nFor dates, `.v` holds the raw date code from the sheet and `.w` holds the text\n\n## Parsing Options\n\nThe exported `read` and `readFile` functions accept an options argument:\n\n| Option Name | Default | Description |\n| :---------- | ------: | :---------- |\n| cellFormula | true    | Save formulae to the .f field ** |\n| cellNF      | false   | Save number format string to the .z field |\n| sheetRows   | 0       | If >0, read the first `sheetRows` rows ** |\n| bookFiles   | false   | If true, add raw files to book object ** |\n| bookProps   | false   | If true, only parse enough to get book metadata ** |\n| bookSheets  | false   | If true, only parse enough to get the sheet names |\n| password    | \"\"      | If defined and file is encrypted, use password ** |\n\n- `cellFormula` only applies to constructing XLS formulae.  XLML R1C1 formulae\n  are stored in plaintext, but XLS formulae are stored in a binary format.\n- Even if `cellNF` is false, formatted text (.w) will be generated\n- In some cases, sheets may be parsed even if `bookSheets` is false.\n- `bookSheets` and `bookProps` combine to give both sets of information\n- `bookFiles` adds a `cfb` object (XLS only)\n- `sheetRows-1` rows will be generated when looking at the JSON object output\n  (since the header row is counted as a row when parsing the data)\n- Currently only XOR encryption is supported.  Unsupported error will be thrown\n  for files employing other encryption methods.\n\n## Tested Environments\n\nTests utilize the mocha testing framework.  Travis-CI and Sauce Labs links:\n\n - <https://travis-ci.org/SheetJS/js-xls> for XLS module in node\n - <https://travis-ci.org/SheetJS/SheetJS.github.io> for XLS* modules\n - <https://saucelabs.com/u/sheetjs> for XLS* modules using Sauce Labs\n\n## Test Files\n\nTest files are housed in [another repo](https://github.com/SheetJS/test_files).\n\nRunning `make init` will refresh the `test_files` submodule and get the files.\n\n## Testing\n\n`make test` will run the nodejs-based tests.  To run the in-browser tests, clone\n[the oss.sheetjs.com repo](https://github.com/SheetJS/SheetJS.github.io) and\nreplace the xls.js file (then fire up the browser and go to `stress.html`):\n\n```\n$ cp xls.js ../SheetJS.github.io\n$ cd ../SheetJS.github.io\n$ simplehttpserver # or \"python -mSimpleHTTPServer\" or \"serve\"\n$ open -a Chromium.app http://localhost:8000/stress.html\n```\n\nFor a much smaller test, run `make test_misc`.\n\n## Other Notes\n\n`CFB` refers to the Microsoft Compound File Binary Format, a container format for XLS as well as DOC and other pre-OOXML data formats.\n\nThe mechanism is split into a CFB parser (which scans through the file and produces concrete data chunks) and a Workbook parser (which does excel-specific parsing).  XML files are not processed by the CFB parser.\n\n## Contributing\n\nDue to the precarious nature of the Open Specifications Promise, it is very\nimportant to ensure code is cleanroom.  Consult CONTRIBUTING.md\n\n## XLSX/XLSM/XLSB Support\n\nXLSX/XLSM/XLSB is available in [js-xlsx](http://git.io/xlsx).\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\nIt is the opinion of the Original Author that this code conforms to the terms of\nthe Microsoft Open Specifications Promise, falling under the same terms as\nOpenOffice (which is governed by the Apache License v2).  Given the vagaries of\nthe promise, the Original Author makes no legal claim that in fact end users are\nprotected from future actions.  It is highly recommended that, for commercial\nuses, you consult a lawyer before proceeding.\n\n## References\n\nCertain features are shared with the Office Open XML File Formats, covered in:\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\nOSP-covered specifications:\n\n - [MS-CFB]: Compound File Binary File Format\n - [MS-XLS]: Excel Binary File Format (.xls) Structure Specification\n - [MS-XLSB]: Excel (.xlsb) Binary File Format\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n - [MS-ODATA]: Open Data Protocol (OData)\n - [MS-OFFCRYPTO]: Office Document Cryptography Structure\n - [MS-OLEDS]: Object Linking and Embedding (OLE) Data Structures\n - [MS-OLEPS]: Object Linking and Embedding (OLE) Property Set Data Structures\n - [MS-OSHARED]: Office Common Data Types and Objects Structures\n - [MS-OVBA]: Office VBA File Format Structure\n - [MS-OE376]: Office Implementation Information for ECMA-376 Standards Support\n - [MS-CTXLS]: Excel Custom Toolbar Binary File Format\n - [MS-XLDM]: Spreadsheet Data Model File Format\n - [XLS]: Microsoft Office Excel 97-2007 Binary File Format Specification\n\n## Badges\n\n[![Build Status](https://travis-ci.org/SheetJS/js-xls.svg?branch=master)](https://travis-ci.org/SheetJS/js-xls)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-xls/master.svg)](https://coveralls.io/r/SheetJS/js-xls?branch=master)\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/4ee4284bf2c638cff8ed705c4438a686 \"githalytics.com\")](http://githalytics.com/SheetJS/js-xls)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SheetJS/js-xls",
  "_id": "xlsjs@0.7.0",
  "dist": {
    "shasum": "a200c1a20161683310a1671368e45b3c3004c3dd"
  },
  "_from": "xlsjs@0.7.0",
  "_resolved": "https://registry.npmjs.org/xlsjs/-/xlsjs-0.7.0.tgz"
}
