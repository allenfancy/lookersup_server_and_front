
/*!
 *
 * cloudxls-node
 *
 */

/**
 * Module dependencies.
 */

var assert = require('assert');
var extend = require('xtend');
var request = require('request');
var version = require(__dirname + '/../package.json').version;

/**
 * Expose `CloudXLS`.
 */

exports = module.exports = CloudXLS;

/**
 * Expose `version`.
 */

exports.version = version;

/**
 * Expose `defaults`.
 */

exports.defaults = {
  api_url: 'https://api.cloudxls.com/v1/convert',
  api_key: process.env.CLOUDXLS_API_KEY
};

/**
 * Creates a CloudXLS instance using `api_key`
 * or a `settings` object.
 *
 * Settings:
 *
 *  - `api_url` : The API url endpoint.
 *  - `api_key` : Your API key.
 *
 * @param {String|Object} api_key|settings
 * @api public
 */

function CloudXLS(settings){
  if ('string' == typeof settings) {
    settings = {
      api_key: settings
    };
  }

  this.settings = extend(exports.defaults, settings);

  assert(this.settings.api_key, 'No API key provided. Use "new CloudXLS(\'YOUR_API_KEY\')".');
}

/**
 * Executes an API request using form `data`,
 * and optionally callbacks `fn`.
 *
 * @param {Object} data
 * @param {Function} fn (optional)
 * @return {Request}
 * @api private
 */

CloudXLS.prototype.request = function(data, fn){
  assert(data, 'No form data provided.');

  // determine mode if not set
  if (!data.mode) {
    // set `mode=inline` when expecting stream
    if (!fn) data.mode = 'inline';
    // default to `async`
    else data.mode = 'async';
  }

  // request options
  var opts = {};
  opts.url = this.settings.api_url;
  opts.json = true;
  opts.method = 'POST';
  opts.headers = {
    'User-Agent': 'cloudxls-node v' + version
  };
  opts.auth = {
    user: this.settings.api_key,
    pass: '',
    sendImmediately: true
  };

  // execute request
  var req = request(opts, fn);

  // populate form fields
  var form = req.form();
  for (var field in data) {
    var value = data[field];

    // we are adding the deep fields manually
    // because they're not recognized by FormData
    if ('object' == typeof value) {
      for (var key in value) {
        form.append(field + '[' + key + ']', value[key]);
      }
    } else {
      form.append(field, value);
    }
  }

  return req;
};

/**
 * Executes a `mode=inline` API request. Returns a `Request` stream.
 *
 * @param {Object} data
 * @param {Function} fn (optional)
 * @return {Request}
 * @api public
 */

CloudXLS.prototype.inline = function(data, fn){
  assert(data, 'No form data provided.');
  data.mode = 'inline';
  return this.request(data, fn);
};

/**
 * Executes a `mode=async` API request and callbacks `fn`.
 *
 * @param {Object} data
 * @param {Function} fn (optional)
 * @return {Request}
 * @api public
 */

CloudXLS.prototype.async = function(data, fn){
  assert(data, 'No form data provided.');
  data.mode = 'async';
  return this.request(data, fn);
};
